#!/usr/bin/env python3

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
from os import walk
import json
import pickle
import sys
import traceback
import shutil

import pandas as pd
import sklearn
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# import untangleai # custom package
# from untangleai.generate_report import generate_report

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

def recursive_overwrite(src, dest, ignore=None):
    if os.path.isdir(src):
        if not os.path.isdir(dest):
            os.makedirs(dest)
        files = os.listdir(src)
        if ignore is not None:
            ignored = ignore(src, files)
        else:
            ignored = set()
        for f in files:
            if f not in ignored:
                recursive_overwrite(os.path.join(src, f), 
                                    os.path.join(dest, f), 
                                    ignore)
    else:
        shutil.copyfile(src, dest)

# The function to execute the training.
def train():
    print('Starting the training.',sklearn.__version__)
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        # Take the set of files and read them all into a single pandas dataframe
        input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        # raw_data = [ pd.read_csv(file) for file in input_files ]
        train_data = pd.read_csv(input_files[0]) #pd.concat(raw_data)

        # labels are in the first column
        y = train_data.iloc[:,0]
        X = train_data.iloc[:,1:]

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.50, random_state=42)

        # Here we only support a single hyperparameter. Note that hyperparameters are always passed in as
        # strings, so we need to do any necessary conversions.
        # max_leaf_nodes = trainingParams.get('max_leaf_nodes', None)
        # if max_leaf_nodes is not None:
        #     max_leaf_nodes = int(max_leaf_nodes)

        # Now use scikit-learn's decision tree classifier to train the model.
        # clf = tree.DecisionTreeClassifier(max_leaf_nodes=max_leaf_nodes)
        clf = RandomForestClassifier()
        clf = clf.fit(X_train, y_train)

        # save the model
        with open(os.path.join(model_path, 'random-forest-model.pkl'), 'wb') as out:
            pickle.dump(clf, out)
        print('Training complete.')

        # print("saving data split for XAI")

        # X.to_csv(os.path.join(input_path,"football-x.csv"),index=False)
        # y.to_csv(os.path.join(input_path,"football-y.csv"),index=False)
        # X_train.to_csv(os.path.join(input_path,"train_football-x.csv"),index=False)
        # y_train.to_csv(os.path.join(input_path,"train_football-y.csv"),index=False)
        # X_test.to_csv(os.path.join(input_path,"test_football-x.csv"),index=False)
        # y_train.to_csv(os.path.join(input_path,"test_football-y.csv"),index=False)

        # print("done saving data split for XAI")
        # print(os.getcwd())
        
        # print("Generating XAI reports")
        # generate_report('xparams.yaml')

        # src = "/opt/program/reports/reports.html"
        # dest = "/opt/ml/reports/reports.html"
        # shutil.copyfile(src, dest)
        # print("File copied successfully.")
        # fname = []
        # for root,d_names,f_names in os.walk("/opt/ml/reports"):
        #     for f in f_names:
        #         fname.append(os.path.join(root, f))

        # print("fname = %s" %fname)

        # source = "/opt/ml/reports"
        # dst = "/opt/program/static/reports"
        # recursive_overwrite(source,dst)
        # run_whatif_explanation('xparams.yaml')

        

    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
